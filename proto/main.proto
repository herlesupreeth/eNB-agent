/* Copyright (c) 2016 Supreeth Herle <s.herle@create-net.org >
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * This file carries the syntax of the messages exchanged between an Empower
 * agent and an Empower controller.
 */

syntax = "proto2";

import "hello.proto";
import "statistics.proto";
import "configs.proto";
import "commands.proto";
import "ran_sharing.proto";

//
// Flag to determine whether add or delete the event.
//
enum event_action {
	// Add event.
	EA_ADD = 0;
	// Delete event.
	EA_DEL = 1;
}

//
// Common header to identify transaction.
//
message header {
	// Version of 1st level message.
	required uint32 vers = 1;
	// Base station identifier.
	required uint32 b_id = 2;
	// Sequence number.
	required uint32 seq = 3;
	// Transaction identifier.
	required uint32 t_id = 4;
}

//
// Defines events that can occur once.
//
message single_event {
	oneof events {
		hello mHello = 1;
		ues_id mUEs_id = 2;
		ue_rrc_meas_conf mUE_rrc_meas_conf = 3;
		cell_stats mCell_stats = 4;
		controller_commands mCtrl_cmds = 5;
		ran_sharing_ctrl mRAN_sharing_ctrl = 6;
	}
}

//
// Defines events that can be scheduled for a particular interval.
//
message schedule_event {
	// Interval in milliseconds between consecutive events.
	optional uint32 interval = 1;
	// Action to be performed in this event.
	optional event_action action = 2;
	// Events to be scheduled.
	oneof events {
		ues_id mUEs_id = 3;
		ue_rrc_meas_conf mUE_rrc_meas_conf = 4;
		cell_stats mCell_stats = 5;
	}
}

//
// Defines events that can be triggered based, i.e meeting a certain condition.
//
message trigger_event {
	// Action to be performed in this event.
	optional event_action action = 1;
	// Triggered events.
	oneof events {
		hello mHello = 2;
		ues_id mUEs_id = 3;
		rrc_meas mRRC_meas = 4;
		ue_rrc_meas_conf mUE_rrc_meas_conf = 5;
		cell_stats mCell_stats = 6;
	}
}

//
// Master message sent by the agent system.
//
message emage_msg {
	// Header for every message.
	required header head = 1;
	// Type of possible events.
	oneof event_types {
		single_event se = 2;
		schedule_event sche = 3;
		trigger_event te = 4;
	}
}
