/* Copyright (c) 2016 Supreeth herle <s.herle@fbk.eu>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * This file carries the definition of the messages used to control the
 * scheduling operation in eNB stack from the controller.
 */

syntax = "proto2";

///////////////////////////////////////////////////////////////////////////////
//								ENUMS										 //
///////////////////////////////////////////////////////////////////////////////

//
// Response types for the RAN sharing request. Success or failure.
//
enum ran_share_req_status {
	// Successful outcome.
	RANSHARE_REQ_SUCCESS = 0;
	// Failure outcome.
	RANSHARE_REQ_FAILURE = 1;
	// Unsupported outcome.
	RANSHARE_REQ_UNSUPPORTED = 2;
}

///////////////////////////////////////////////////////////////////////////////
// 																			 //
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
//								MESSAGES							 		 //
///////////////////////////////////////////////////////////////////////////////

//
// Message definition for scheduling parameters that needs to be passed to UE or
// tenant scheduler.
//
message scheduling_param {
	// Name of the field.
	required string name = 1;
	// Value of the field.
	required string value = 2;
}

//
// Message definition of type of tenant selected from controller.
//
message tenant_scheduler {
	// Unique name of the tenant scheduler.
	required string name = 1;
	// Name value pairs of the parameters to be passed to the scheduler.
	repeated scheduling_param params = 2;
}

//
// Message definition of RBs allocation in a subframe.
//
message rbs_alloc_over_sf {
	// Allocation of RBs in a subframe.
	// Length of the following field depends on the number of RBs the eNB or
	// cell is operating on. (6 RBs, 25 RBs, 50 RBs, 100 RBs etc.)
	repeated string rbs_alloc = 1;
}

//
// Message definition of adding a new tenant.
//
message add_tenant {
	// Unique PLMN ID of a tenant.
	required string plmn_id = 1;
}

//
// Message definition of removing a tenant.
//
message remove_tenant {
	// Unique PLMN ID of a tenant.
	required string plmn_id = 1;
}

//
// Message definition for UE scheduler for a tenant.
//
message ue_sched_info {
	// Unique name of the UE scheduler.
	required string name = 1;
	// Name value pairs of the parameters to be passed to the scheduler.
	repeated scheduling_param params = 2;
}

//
// Message definition of selecting the UE schedulers for a tenant.
//
message ue_sched_select {
	// Unique PLMN ID of a tenant.
	required string plmn_id = 1;
	// Information about UEs scheduler for the tenant in DL.
	optional ue_sched_info dl_ue_sched = 2;
	// Information about UEs scheduler for the tenant in UL.
	optional ue_sched_info ul_ue_sched = 3;
}

//
// Message definition of RBs requested for each cell.
//
message rbs_per_cell {
	// Physical cell id.
	required uint32 phys_cell_id = 1;
	// Number of Resource Blocks (RBs) required by tenant over every scheduling
	// window (DL/UL) per cell.
	required uint64 num_rbs = 2;
}

//
// Message definition of request for RBs by a tenant.
//
message tenant_rbs_req {
	// Unique PLMN ID of a tenant.
	required string plmn_id = 1;
	// RBs request in different cells/CCs (Downlink).
	repeated rbs_per_cell rbs_dl = 2;
	// RBs request in different cells/CCs (Uplink).
	repeated rbs_per_cell rbs_ul = 3;
}

//
// Message definition for modifying the scheduling window to be considered.
// Scheduling window is the time period over which the requested RBs by the
// tenants needs to be scheduled.
//
message modify_sched_window {
	// Scheduling window in terms of number of Subframes in DL.
	optional uint64 sched_window_dl = 1;
	// Scheduling window in terms of number of Subframes in UL.
	optional uint64 sched_window_ul = 2;
}


//
// Message definition for RBs allocation per cell over a scheduling window.
//
message rbs_alloc_per_cell {
	// Physical cell id.
	required uint32 phys_cell_id = 1;
	// RBs allocation to tenants over scheduling window time (DL/UL) per cell.
	// The length of array equals to scheduling window time (DL/UL).
	repeated rbs_alloc_over_sf sf = 2;
}

//
// Message definition for tenants scheduling type with static allocation of RBs
// for tenants.
//
message static_tenants_sched {
	// RBs allocation to tenants over a cells/CCs and over scheduling window
	// time.
	repeated rbs_alloc_per_cell cell = 1;
}

//
// Message definition for tenants scheduling type with dynamic allocation of RBs
// for tenants by the selected tenant scheduler.
//
message dynamic_tenants_sched {
	// Tenant scheduler information.
	required tenant_scheduler sched = 1;
}

//
// Message definition for tenants scheduling type where RBs allocation to
// tenants are partially static and partially dynamic (by Tenant scheduler).
//
message mixed_tenants_sched {
	// RBs allocation to tenants over a cells/CCs and over scheduling window
	// time.
	repeated rbs_alloc_per_cell cell = 1;
	// Tenant scheduler information.
	required tenant_scheduler sched = 2;
}

//
// Message definition for tenants scheduling type selection in DL/UL.
//
message tenants_sched_select {
	oneof sched_types {
		// Static RBs allocation to tenants (Downlink).
		static_tenants_sched static_sched_dl = 1;
		// Dynamic RBs allocation to tenants by tenant scheduler (Downlink).
		dynamic_tenants_sched dynm_sched_dl = 2;
		// Mix of both static and dynamic RBs allocation to tenants (Downlink).
		mixed_tenants_sched mixed_sched_dl = 3;
		// Static RBs allocation to tenants (Uplink).
		static_tenants_sched static_sched_ul = 4;
		// Dynamic RBs allocation to tenants by tenant scheduler (Uplink).
		dynamic_tenants_sched dynm_sched_ul = 5;
		// Mix of both static and dynamic RBs allocation to tenants (Uplink).
		mixed_tenants_sched mixed_sched_ul = 6;
	}
}

//
// Message definition of request for controlling the RAN sharing in eNB.
//
message ran_sharing_ctrl_req {
	// RAN sharing control requests.
	oneof ctrl_req {
		// Add a new Tenant.
		add_tenant add_t = 1;
		// Remove an existing Tenant.
		remove_tenant rem_t = 2;
		// Selecting or modifying the UE scheduler for a tenant.
		ue_sched_select ue_sched_sel = 3;
		// Tenant's request for number of RBs over a repeating scheduling
		// window.
		tenant_rbs_req t_rbs_req = 4;
		// Select the Tenant Scheduler type.
		tenants_sched_select t_sched_sel = 5;
		// Modify the scheduling window.
		modify_sched_window mod_sched_window = 6;
	}
}

//
// Message definition of reply message for a request to control the RAN sharing
// in eNB.
//
message ran_sharing_ctrl_repl {
	// Status of request for controlling the RAN sharing in eNB.
	required ran_share_req_status status = 1;
}

//
// Message definition for controlling RAN sharing in eNB.
//
message ran_sharing_ctrl {
	// Request and response for controlling RAN sharing in eNB.
	oneof ran_sharing_ctrl_m {
		// Request message for controlling RAN sharing in eNB.
		ran_sharing_ctrl_req req = 1;
		// Reply message for a request to controlling RAN sharing in eNB.
		ran_sharing_ctrl_repl repl = 2;
	}
}

///////////////////////////////////////////////////////////////////////////////
// 																			 //
///////////////////////////////////////////////////////////////////////////////