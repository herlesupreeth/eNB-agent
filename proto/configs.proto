/* Copyright (c) 2016 Supreeth herle <s.herle@create-net.org>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * This file carries the definition of the configuration messages 
 * exchanged between an Empower agent and an Empower controller.
 */

syntax = "proto2"; 

///////////////////////////////////////////////////////////////////////////////
//								ENUMS										//
///////////////////////////////////////////////////////////////////////////////

//
// Types of configuration related messages requested/sent by the controller.
//
enum config_msg_type {
	// eNB configuration request.
	ENB_CONF_REQUEST = 0;
	// eNB configuration reply.
	ENB_CONF_REPLY = 1;
	// UE configuration request.
	UE_CONF_REQUEST = 2;
	// UE configuration reply.
	UE_CONF_REPLY = 3;
}

//
// Types of frequency hopping modes in the LTE.
//
enum hopping_mode {
	// Inter subframe hopping.
	HM_INTER = 0;
	// Intra subframe hopping.
	HM_INTERINTRA = 1;
}

//
// Amount of PHICH resource used.
//
enum phich_resource {
	// One-sixth.
	PR_ONE_SIXTH = 0;
	// Half.
	PR_HALF = 1;
	// One.
	PR_ONE = 2;
	// Two.
	PR_TWO = 3;
}

//
// Type of cyclic prefix, which help in PHICH duration determination.
//
enum phich_duration {
	// PHICH duration for Normal cyclic prefix.
	PHICH_DUR_NORMAL = 0;
	// PHICH duration for Extended cyclic prefix.
	PHICH_DUR_EXTENDED = 1;
}

//
// Type of cyclic prefix used in uplink.
//
enum ul_cyclic_prefix_length {
	// Normal cyclic prefix.
	UL_PREFIX_NORMAL = 0;
	// Extended cyclic prefix.
	UL_PREFIX_EXTENDED = 1;
}

//
// Type of cyclic prefix used in downlink.
//
enum dl_cyclic_prefix_length {
	// Normal cyclic prefix.
	DL_PREFIX_NORMAL = 0;
	// Extended cyclic prefix.
	DL_PREFIX_EXTENDED = 1;
}

//
// Type of duplex mode used.
//
enum duplex_mode {
	// Time Division Duplex (TDD).
	DM_TDD = 0;
	// Frequency Division Duplex (FDD).
	DM_FDD = 1;
}

//
// Type of QAM mode used.
//
enum qam {
	// 16 Qaudrature Amplitude Modulation.
	MOD_16QAM = 0;
	// 64 Qaudrature Amplitude Modulation.
	MOD_64QAM = 1;
}

//
// Types of measurement gap pattern configured in RRC.
//
enum meas_gap_pattern {
	// Measurement Gap 0.
	MGP_GP0 = 0;
	// Measurement Gap 1.
	MGP_GP1 = 1;
	// Measurement Gap not configured.
	MGP_OFF = 2;
}

//
// Types of operations, which are required for configuring Scheduling Request 
// and CQI.
//
enum setup_release_action {
	// Setup action.
	SRA_SETUP = 0;
	// Release action.
	SRA_RELEASE = 1;
}

//
// Types of UE transmission antenna. Related to power control.
//
enum ue_transmission_antenna {
	UETA_NONE = 0;
	UETA_OPEN_LOOP = 1;
	UETA_CLOSED_LOOP = 2;
}

//
// Types of UE transmission mode.
//
enum ue_transmission_mode {
	UETM_TM1 = 0;
	UETM_TM2 = 1;
	UETM_TM3 = 2;
	UETM_TM4 = 3;
	UETM_TM5 = 4;
	UETM_TM6 = 5;
	UETM_TM7 = 6;
	UETM_TM8 = 7;
}

//
// Types of aperiodic CQI reporting mode.
//
enum aperiodic_cqi_report_mode {
	ACRM_RM12 = 0;
	ACRM_RM20 = 1;
	ACRM_RM22 = 2;
	ACRM_RM30 = 3;
	ACRM_RM31 = 4;
	ACRM_NONE = 5;
}

//
// Types of ACK/NACK feedback mode in TDD.
//
enum tdd_ack_nack_feedback_mode {
	TANFM_BUNDLING = 0;
	TANFM_MULTIPLEXING = 1;
}

//
// States in which an UE can be during its lifecycle in eNB.
//
enum ue_state {
	// UE inactive state.
	UES_RRC_INACTIVE = 0;
	// UE in idle state.
	UES_RRC_IDLE = 1;
	// UE received System Info state.
	UES_RRC_SI_RECEIVED = 2;
	// RRC Connected state.
	UES_RRC_CONNECTED = 3;
	// RRC Reconfigured state.
	UES_RRC_RECONFIGURED = 4;
	// UE is handed over.
	UES_RRC_HO_EXECUTION = 5;
}

//
// Configuration of different layers that could be requested by the controller.
//
enum layer_config {
	// Configuration of all layers.
	LC_ALL = 1;
	// Configuration of PHY layer related parameters.
	LC_PHY = 2;
	// Configuration of MAC layer related parameters.
	LC_MAC = 4;
	// Configuration of RRC layer related parameters.
	LC_RRC = 8;
}

///////////////////////////////////////////////////////////////////////////////
//																			//
///////////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////////////
//								MESSAGES									//
///////////////////////////////////////////////////////////////////////////////

//
// Message definition for request of eNB configuration.
//
message enb_config_request {
	// Configuration of different layers.
	// Bitmap of "layer_config" type.
	optional uint32 layer = 1;
	// List of CC (Component Carrier) ids for which configuration are needed.
	// Leave it empty to request all cc ids configuraiton.
	repeated uint32 cc_id = 2;
}

//
// Message definition for request of UEs configuration.
//
message ue_config_request {
	// Configuration of different layers.
	// Bitmap of "layer_config" type.
	optional uint32 layer = 1;
	// List of RNTIs of UEs for which configuration are needed.
	// Radio Network Temporary Identifier (RNTI).
	// Leave it empty to request all UEs configuration.
	repeated uint32 rnti = 2;
}

//
// Message definition for configuration of System Information (SI) messages.
//
message si_info_msg {
	// Periodicity of SI message in radio frames.
	optional uint32 periodicity = 1;
	// The length of the SI message in bytes.
	optional uint32 length = 2;
}

//
// Message definition for configuration of System information.
//
message si_info_config {
	// System Frame number.
	optional uint32 sfn = 1;
	// Length of System Information Block 1 in bytes.
	optional uint32 sib1_len = 2;
	// Scheduling window for all SIs in subframes.
	optional uint32 si_window_len = 3;
	// List of SI messages to be sent.
	// The index of the list identifies the type of an SI message.
	// 0 - SIB1
	// 1..31 - SIx
	// 32..63 - PCCH
	repeated si_info_msg si_message = 4;

}

//
// Message definition for physical layer related configuration of a cell.
//
message cell_phy_config {
	// Physical cell id of this cell.
	optional uint32 pci = 1;
	// PLMN cell id of this cell.
	optional uint32 cell_id = 2;
	// PUSCH resources in RBs for hopping.
	// PUSCH = Physical Uplink Shared channel.
	// RB = Resource block.
	optional uint32 pusch_hopp_offset = 3;
	// Type of hopping mode used.
	optional hopping_mode hopp_mode = 4;
	// Number of subbands.
	optional uint32 n_sb = 5;
	// Number of REGs used for PHICH.
	// Resource Element Group (REG). 1 REG = 4 Resource Elements (RE)
	// Physical channel HybridARQ Indicator Channel (PHICH).
	optional phich_resource phich_res = 6;
	// PHICH duration used.
	optional phich_duration phich_dur = 7;
	// Number of OFDM symbols possible to use for PDCCH in a subframe.
	// Refer TS 36.211, section 6.9.
	optional uint32 init_nr_PDCCH_OFDM_sym = 8;
	// System Information (SI) configuration.
	optional si_info_config si_conf = 9;
	// Downlink transmission bandwidth in RBs.
	optional uint32 dl_bw = 10;
	// Uplink transmission bandwidth in RBs.
	optional uint32 ul_bw = 11;
	// Cyclic prefix length used in uplink.
	optional ul_cyclic_prefix_length ul_cyc_prefix_len = 12;
	// Cyclic prefix length used in downlink.
	optional dl_cyclic_prefix_length dl_cyc_prefix_len = 13;
	// Number of cell specific antenna ports.
	optional uint32 antenna_ports_count = 14;
	// Type of duplex mode used.
	optional duplex_mode dupl_mode = 15;
	// Physical Random Access Channel (PRACH) configuration index.
	// Refer TS 36.211, section 5.7.1.
	optional uint32 prach_conf_index = 16;
	// Physical Random Access Channel (PRACH) frequency offset.
	// Refer TS 36.211, section 5.7.1.
	optional uint32 prach_freq_offset = 17;
 	// The duration of the Random Access (RA) response window in subframes.
	optional uint32 ra_resp_window_size = 18;
	// Resource index for ACK/NACK.
	// Refer TS 36.213, section 10.1.
	optional uint32 n1PUCCH_AN = 19;
	// Number of equally spaced cyclic time shifts.
	// Refer TS 36.211, section 5.4.
	optional uint32 deltaPUCCH_shift = 20;
	// 64 QAM is enabled or not.
	optional qam enable_64QAM = 21;
}

//
// Message definition for MAC layer related configuration of a cell.
//
message cell_mac_config {
	// DL/UL subframe assignment. TDD only.
	optional uint32 sf_assign = 1;
	// Special subframe pattern. TDD only. Refer TS 36.211, table 4.2.1.
	optional uint32	special_subframe_patterns = 2;
	// Timer for RA. MAC contention resolution timer.
	optional uint32 mac_cont_resol_timer = 3;
	// Maximum Hybrid ARQ for Msg3 transmission. Refer TS 36.321.
	optional uint32 max_HARQ_Msg3Tx = 4;
	// n Resource Blocks CQI. Refer TS 36.211, section 5.4.
	optional uint32 nRB_cqi = 5;
}

//
// Message definition for RRC layer related configuration of a cell.
//
message cell_rrc_config {
	// Radio Frame meeting the following equation is allocated for MBSFN.
	// SFN mod radioframeAllocationPeriod = radioframeAllocationOffset
	// Configuration of MBSFN radio frame period in SIB2.
	// Multimedia Broadcast Single Frequency network (MBSFN)
	repeated uint32 mbsfn_conf_rfperiod = 1;
	// Configuration of MBSFN radio frame offset in SIB2.
	repeated uint32 mbsfn_conf_rfoffset = 2;
	// Bitmap indicating subframes that are allocated for MBSFN 
	// within the MBSFN frame.
	repeated uint32 mbsfn_conf_sfalloc = 3;
	// SRS subframe configuration in SIB2. Refer TS 36.211, table 5.5.3.3-1 & 2.
	// Sounding Reference Signal (SRS).
	optional uint32 srs_sf_conf = 4;
	// SRS bandwidth configuration in SIB2. Refer TS 36.211, section 5.5.3.2.
	optional uint32 srs_bw_conf = 5;
	// SRS maximum uplink pilot time slot.
	// Boolean value. Refer TS 36.211, section 5.5.3.2. TDD only
	optional uint32 srs_max_up_pts = 6;
}

//
// Message definition for cell configuration in an eNB.
//
message cell_config {
	// Component Carrier (CC) index.
	optional uint32 cc_id = 1;
	// Physical layer related configuration of the cell.
	optional cell_phy_config phy_conf = 2;
	// MAC layer related configuration of the cell.
	optional cell_mac_config mac_conf = 3;
	// RRC layer related configuration of the cell.
	optional cell_rrc_config rrc_conf = 4;
}

//
// Message definition of reply for eNB configuration request.
//
message enb_config_reply {
	// List of configuraiton of all or requested cells.
	repeated cell_config cell_conf = 1;
}

//
// Message definition for configuration of discontinuos reception in RRC.
//
message drx_config {
	// Duration of 'ON time' within one DRX cycle in subframes.
	// Refer TS 36.321.
	optional uint32 on_dur_timer = 1;
	// Time in subframes for how long UE should remain 'ON' after 
	// the reception of a PDCCH. Refer TS 36.321.
	optional uint32 drx_inact_timer = 2;
	// Time in subframes, maximum number of consecutive PDCCH subframes the UE 
	// should remain active to wait an incoming retransmission. Refer TS 36.321.
	optional uint32 drx_retrx_timer = 3;
	// Long DRX cycle. Specified in subframes. Refer TS 36.321.
	optional uint32 long_drx_cycle = 4;
	// Long DRX start offset. Used to calculate DRX cycle. Refer TS 36.321.
	optional uint32 long_drx_cycle_start_offset = 5;
	// DRX cycle which can be implemented within the 'OFF' period of a 
	// long DRX Cycle. Specified in subframes.
	optional uint32 short_drx_cycle = 6;
	// The consecutive number of subframes the UE shall follow the short DRX
	// cycle after the DRX Inactivity Timer has expired. Specified in subframes.
	optional uint32 drx_short_cycle_timer = 7;
}

//
// Message definition for configuration of semi-persistent scheduling in RRC.
//
message sps_config {
	// SPS UL scheduling interval in subframes.
	// SPS = Semi-Persistent Scheduling.
	optional uint32 sps_interval_ul = 1;
	// SPS DL scheduling interval in subframes.
	optional uint32 sps_interval_dl = 2;
	// Number of SPS HARQ processes. Refer TS 36.321.
	optional uint32 n_conf_sps_proc = 3;
	// Index to one of the four PUCCH resource values. Refer TS 36.213.
	repeated uint32 n1_PUCCH_AN_persistent_element = 4;
	// Number of empty transmissions before release of SPS.
	optional uint32 implicit_release_after = 5;
}

//
// Message definition for configuration of SR (Scheduling Request) in MAC.
//
message sr_config {
	// Indicates if SR config should be changed or released.
	optional setup_release_action sr_action = 1;
	// SR scheduling interval in subframes.
	optional uint32 sched_inter = 2;
	// Maximum number of SR transmission count. Refer 36.321 5.4.4 SR.		
	optional uint32 dsr_trans_max = 3;
}

//
// Message definition for configuration of CQI in RRC.
//
message cqi_config {
	// Indicats if CQI changed or released.
	optional setup_release_action cqi_action = 1;
	// CQI scheduling interval in subframes.
	optional uint32 cqi_sched_inter = 2;
	// Rank Indication scheduling interval in subframes.
	optional uint32 ri_sched_inter = 3;
}

//
// Message definition for UE capabilities.
//
message ue_capabilities {
	// Boolean value. Only half duplex support. FDD operation
	repeated uint32 half_duplex = 1;
	// Supported LTE bands.
	repeated uint32 band = 2;
	// Boolean value. Support for intra-subframe hopping.
	optional uint32 intra_SF_hopping = 3;
	// Support for type 2 hopping with n_sb > 1
	optional uint32 type2_sb_1 = 4;
	// Category of the UE.
	optional uint32 ue_category = 5;
	// Boolean value. UE support for resource allocation type 1.
	optional uint32 res_alloc_type1 = 6;
}

//
// Message definition for Secondary Cell (SCell) configuration.
//
message scell_config {
	// Component Carrier identifier.
	optional uint32 cc_id = 1;
	// Index of this Scell (RRC SCellIndex)
	optional uint32 scell_index = 2;
	// Boolean value. Indicates if cross-carrier scheduling is used 
	// by this SCell.
	optional uint32 use_ccs = 3;			
	// Index of the cell responsible for scheduling this SCell if 
	// cross-carrier scheduling is enabled.
	optional uint32 sched_cell_index = 4;
	// Start of OFDM symbol of PDSCH data region for this SCell.
	optional uint32 pdsch_start = 5;
}

//
// Message definition for physical layer related configuration of a UE.
//
message ue_phy_config {
	// Scheduling Request configuration.
	optional sr_config sr_conf = 1;
	// Transmission mode 1 (single antenna), 2 (transmit diversity), etc.
	optional ue_transmission_mode transmission_mode = 2;
	// UE transmission antenna type. Related to power control.
	optional ue_transmission_antenna ue_trx_antenna = 3;
}

//
// Message definition for MAC layer related configuration of a UE.
//
message ue_mac_config {
	// Timer in SF. Control the synchronization status of the UE, not the 
	// actual advance procedure. Refer TS 36.321.
	optional uint32 time_alignment_timer = 1;
	// Boolean value. Transmission Time Interval bundling enable or disable.
	optional uint32 tti_bundling = 2;
	// Maximum HARQ retransmission for UL.
	optional uint32 max_HARQ_tx = 3;
	// Boolean value. Refer TS 36.213
	optional uint32 ack_nack_simultaneous_trans = 4;
	// Boolean value. Refer TS 36.213
	optional uint32 simultaneous_ack_nack_cqi = 5;
	// Types of aperiodic CQI reporting mode.
	optional aperiodic_cqi_report_mode aper_cqi_rep = 6; 
}

//
// Message definition for RRC layer related configuration of a UE.
//
message ue_rrc_config {
	// Discontinuos reception (DRX) configuration.
	optional drx_config drx_conf = 1;
	// Measurement gap configuration. Refer TS 36.133.
	optional meas_gap_pattern meas_gap_patt = 2;
	// Measurement gap offset if measurement gap is configured.
	optional uint32 meas_gap_config_sf_offset = 3;
	// Semi-Persistent Scheduling configuration.
	optional sps_config sps_conf = 4;
	// CQI configuration (Optional)
	optional cqi_config cqi_conf= 5;
	// Aggregated bit-rate of non-gbr bearer per UE. Refer TS 36.413.
	optional uint64 ue_aggreg_max_bitrate_UL = 6;
	// Aggregated bit-rate of non-gbr bearer per UE. Refer TS 36.413.
	optional uint64 ue_aggreg_max_bitrate_DL = 7;
	// UE capabilities information.
	optional ue_capabilities capabilities = 8;
	// Offset index value for HARQ-ACK. Refer TS 36.213.
	optional uint32 beta_offset_ACK_index = 9;
	// Offset index value for Rank Indication. Refer TS 36.213.
	optional uint32 beta_offset_RI_index = 10;
	// Offset index value for CQI. Refer TS 36.213.
	optional uint32 beta_offset_CQI_index = 11;
	// Secondary cells configurations.
	repeated scell_config scell_conf = 12;
	// Deactivation timer for secondary cell.
	optional uint32 scell_deactivation_timer = 13;
	// Type of ACK/NACK feedback mode in TDD.
	optional tdd_ack_nack_feedback_mode tdd_ack_nack_feedb = 14;
	// Repition factor set for ACK/NACK. Refer TS 36.213, section 10.1.
	optional uint32 ack_nack_rep_factor = 15;
	// Boolean value. Extended BSR size enable or disable.
	optional uint32 extended_bsr_size = 16;
	// Boolean value. Support for carrier aggregation
	optional uint32 ca_support = 17;
	// Boolean value. Support for cross carrier scheduling.
	optional uint32 cross_carrier_sched_supp = 18;
	// Component Carrier id of primary cell.
	optional uint32 pcell_cc_id = 19;
}

//
// Message definition for UE configuration.
//
message ue_config {
	// RNTIs of UE for which configuration are needed.
	optional uint32 rnti = 1; 
	// State of the UE in eNB.
	optional ue_state state = 2;
	// Physical layer related configuration of the UE.
	optional ue_phy_config phy_conf = 3;
	// MAC layer related configuration of the UE.
	optional ue_mac_config mac_conf = 4;
	// RRC layer related configuration of the UE.
	optional ue_rrc_config rrc_conf = 5;
}

//
// Message definition of reply for UE configuration request.
//
message ue_config_reply {
	// List of configuraiton of all or requested UEs.
	repeated ue_config ue_conf = 1;
}

//
// Common configurations message to identify the type of configurations.
//
message configs {
	// Type of 2nd level message.
	optional config_msg_type type = 100;
	// Types of configuration messages.
	oneof config_msg {
		// Request message for eNB configuration.
		enb_config_request enb_conf_req = 1;
		// Reply message with eNB configuration.
		enb_config_reply enb_conf_repl = 2;
		// Request message for UEs configuration.
		ue_config_request ue_conf_req = 3;
		// Reply message with UEs configuration.
		ue_config_reply ue_conf_repl = 4;
	}
}