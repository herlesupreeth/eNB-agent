/* Copyright (c) 2016 Supreeth herle <s.herle@create-net.org>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * This file carries the definition of the configuration messages
 * exchanged between an Empower agent and an Empower controller.
 */

syntax = "proto2";

///////////////////////////////////////////////////////////////////////////////
//								ENUMS										//
///////////////////////////////////////////////////////////////////////////////

//
// Types of measurement gap pattern configured in RRC.
//
enum meas_gap_pattern {
	// Measurement Gap 0.
	MGP_GP0 = 0;
	// Measurement Gap 1.
	MGP_GP1 = 1;
	// Measurement Gap not configured.
	MGP_OFF = 2;
}

//
// RRC states of UE.
//
enum rrc_state {
	// UE not attached with eNB.
	RS_RRC_INACTIVE = 0;
	// UE is not active.
	RS_RRC_IDLE = 1;
	// UE has received SI.
	RS_RRC_SI_RECEIVED= 2;
	// UE is attached to eNB.
	RS_RRC_CONNECTED = 3;
	// UE is active.
	RS_RRC_RECONFIGURED = 4;
	// UE is process of HO.
	RS_RRC_HO_EXECUTION = 5;
}

//
// RAT types for RRC measurements. For now only EUTRAN measurement is supported.
//
enum allowed_meas_bw {
	// 6 resource block of bandwidth.
	AMBW_6 = 0;
	// 15 resource block of bandwidth.
	AMBW_15 = 1;
	// 25 resource block of bandwidth.
	AMBW_25 = 2;
	// 50 resource block of bandwidth.
	AMBW_50 = 3;
	// 75 resource block of bandwidth.
	AMBW_75 = 4;
	// 100 resource block of bandwidth.
	AMBW_100 = 5;
}

//
// Cell or frequency offset ranges in dB (-24 to 24 dB).
//
enum Q_offset_range {
	QOR_dB_24 = 0;
	QOR_dB_22 = 1;
	QOR_dB_20 = 2;
	QOR_dB_18 = 3;
	QOR_dB_16 = 4;
	QOR_dB_14 = 5;
	QOR_dB_12 = 6;
	QOR_dB_10 = 7;
	QOR_dB_8 = 8;
	QOR_dB_6 = 9;
	QOR_dB_5 = 10;
	QOR_dB_4 = 11;
	QOR_dB_3 = 12;
	QOR_dB_2 = 13;
	QOR_dB_1 = 14;
	QOR_dB0 = 15;
	QOR_dB1 = 16;
	QOR_dB2 = 17;
	QOR_dB3 = 18;
	QOR_dB4 = 19;
	QOR_dB5 = 20;
	QOR_dB6 = 21;
	QOR_dB8 = 22;
	QOR_dB10 = 23;
	QOR_dB12 = 24;
	QOR_dB14 = 25;
	QOR_dB16 = 26;
	QOR_dB18 = 27;
	QOR_dB20 = 28;
	QOR_dB22 = 29;
	QOR_dB24 = 30;
}

//
// Range used for encode either a single or a range of physical cell identities.
//
enum pci_range {
	// 4 consecutive physical cell identities.
	PCIR_n4	= 0;
	// 8 consecutive physical cell identities.
	PCIR_n8	= 1;
	// 12 consecutive physical cell identities.
	PCIR_n12 = 2;
	// 16 consecutive physical cell identities.
	PCIR_n16 = 3;
	// 24 consecutive physical cell identities.
	PCIR_n24 = 4;
	// 32 consecutive physical cell identities.
	PCIR_n32 = 5;
	// 48 consecutive physical cell identities.
	PCIR_n48 = 6;
	// 64 consecutive physical cell identities.
	PCIR_n64 = 7;
	// 84 consecutive physical cell identities.
	PCIR_n84 = 8;
	// 96 consecutive physical cell identities.
	PCIR_n96 = 9;
	// 128 consecutive physical cell identities.
	PCIR_n128 = 10;
	// 168 consecutive physical cell identities.
	PCIR_n168 = 11;
	// 252 consecutive physical cell identities.
	PCIR_n252 = 12;
	// 504 consecutive physical cell identities.
	PCIR_n504 = 13;
	// Spare 2 consecutive physical cell identities.
	PCIR_spare2	= 14;
	// Spare 1 consecutive physical cell identities.
	PCIR_spare1	= 15;
}

//
// Value range used for time to trigger parameter. Parameter specified in
// number of milliseconds.
//
enum time_to_trigger {
	TTRIG_ms0 = 0;
	TTRIG_ms40 = 1;
	TTRIG_ms64 = 2;
	TTRIG_ms80 = 3;
	TTRIG_ms100 = 4;
	TTRIG_ms128 = 5;
	TTRIG_ms160 = 6;
	TTRIG_ms256 = 7;
	TTRIG_ms320 = 8;
	TTRIG_ms480 = 9;
	TTRIG_ms512 = 10;
	TTRIG_ms640 = 11;
	TTRIG_ms1024 = 12;
	TTRIG_ms1280 = 13;
	TTRIG_ms2560 = 14;
	TTRIG_ms5120 = 15;
}

//
// Purposes of periodic reporting of RRC measurements.
//
enum periodic_rep_purpose {
	// Report strongest cells in the neighborhood.
	PERRP_REPORT_STRONGEST_CELLS = 0;
	// Report Cell Global Identifier of cells in neighborhood.
	PERRP_REPORT_CGI_INFO = 1;
}

//
// Quantity to be used as reference for triggering the event.
//
enum trigger_quantity {
	// RSRP based triggered event.
	TRIGQ_RSRP = 0;
	// RSRQ based triggered event.
	TRIGQ_RSRQ = 1;
}

//
// Quantity to be reported while reporting the RRC measurements.
//
enum report_quantity {
	// Report same element as triggerd quantity.
	REPQ_SAME_AS_TRIGGER_QUANT = 0;
	// Report both RSRP and RSRQ.
	REPQ_BOTH = 1;
}

//
// Interval between periodical reports. Parameter specified in
// number of time units.
//
enum report_interval {
	REPINT_ms120 = 0;
	REPINT_ms240 = 1;
	REPINT_ms480 = 2;
	REPINT_ms640 = 3;
	REPINT_ms1024 = 4;
	REPINT_ms2048 = 5;
	REPINT_ms5120 = 6;
	REPINT_ms10240 = 7;
	REPINT_min1 = 8;
	REPINT_min6 = 9;
	REPINT_min12 = 10;
	REPINT_min30 = 11;
	REPINT_min60 = 12;
	REPINT_spare3 = 13;
	REPINT_spare2 = 14;
	REPINT_spare1 = 15;
}

//
// Number of measurement report that needs to be reported in total for a
// configured measurement.
//
enum report_amount {
	REPAMT_1 = 0;
	REPAMT_2 = 1;
	REPAMT_4 = 2;
	REPAMT_8 = 3;
	REPAMT_16 = 4;
	REPAMT_32 = 5;
	REPAMT_64 = 6;
	REPAMT_infinity = 7;
}

//
// Setup or release the measurement of UE Rx Tx time difference. Requires
// UE with Rel.9 and above. Applicable only in EUTRA measurements.
//
enum ue_rxtx_time_difference {
	// Setup the time difference measurement.
	UERXTXTD_SETUP = 0;
}

//
// Denotes the type of Duplexing mechanism used.
//
enum DD_mode {
	// Frequency Division Duplexing mode.
	DDM_FDD = 0;
	// Time Division Duplexing mode.
	DDM_TDD = 1;
}

//
// Status of the request for a particular configuration. Success or failure.
//
enum conf_req_status {
	// Successfully received response for request.
	CREQS_SUCCESS = 0;
	// Failed to receive response for request.
	CREQS_FAILURE = 1;
}

///////////////////////////////////////////////////////////////////////////////
// 																			//
///////////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////////////
//								MESSAGES									//
///////////////////////////////////////////////////////////////////////////////

//
// Message definition for request of RRC measurements configuration of a UE.
//
message ue_rrc_meas_conf_req {
	// RNTI of UE for which configuration is needed.
	required uint32 rnti = 1;
}

//
// Message definition for UE capabilities.
//
message ue_capabilities {
	// Supported LTE bands.
	repeated uint32 band = 1;
	// 3GPP release implementation in UE.
	optional uint32 release_3gpp = 2;
	// Inter frequency neighbor cell Signalling Information Acquisition.
	optional bool interFreq_SI_acq = 3;
	// Intra frequency neighbor cell Signalling Information Acquisition.
	optional bool intraFreq_SI_acq = 4;
	// Support for A4 and A5 EUTRA RRC measurement events.
	optional bool A5_A4_events = 5;
	// Support for Inter frequency measurements.
	optional bool interFreq_meas = 6;
	// Intra frequency reference signal periodic measurements support.
	optional bool intraFreq_ref_per_meas = 7;
	// Inter frequency reference signal periodic measurements support.
	optional bool interFreq_ref_per_meas = 8;
}

//
// Message definition for cell info for which RRC EUTRA measurements needs
// to be reported.
//
message cells_to_measure {
	// Physical Cell identifier.
	optional uint32 phy_cell_id = 1;
	// Cell or frequency specific offset to be applied when evaluating
	// triggering conditions for measurement reporting.
	optional Q_offset_range offset_range = 2;
}

//
// Message definition for cell info for which RRC measurements must not be done.
//
message blacklist_cells {
	// Strating Physical Cell identifier.
	optional uint32 start_pci = 1;
	// Number of consecutive physical cell identities (including start).
	optional pci_range range = 2;
}

//
// Message definition for measurment object configuration for
// EUTRA RRC measurements request.
//
message meas_obj_EUTRA {
	// Carrier frequency on which measurements should be carried out.
	optional uint32 carrier_freq = 1;
	// Maximum allowed measurement bandwidth on a carrier frequency.
	optional allowed_meas_bw meas_bw = 2;
	// Cells for which measurements must be fetched.
	repeated cells_to_measure cells = 3;
	// Blacklisted cells for which measurements must not be fetched.
	repeated blacklist_cells bkl_cells = 4;
}

//
// Message definition for RRC measurement object configuration.
//
message meas_object {
	// Measurement Object identifier. ID range from (1-32) and 0 means not set.
	required int32 measObjId = 1 [default = 0];
	// Measurement object configuration.
	oneof meas_obj {
		// Measurement object for EUTRA RRC measurements.
		meas_obj_EUTRA measObj_EUTRA = 2;
		// Measurement object for UTRA RRC measurements.
		//meas_obj_UTRA measObj_UTRA = 3;
		// Measurement object for GERAN RRC measurements.
		//meas_obj_GERAN measObj_GERAN = 4;
		// Measurement object for CDMA2000 RRC measurements.
		//meas_obj_CDMA2000 measObj_CDMA2000 = 5;
		// For now only EUTRAN measurements are supported.
	}
}

//
// Message definition for report configuration for periodical
// RRC measurements.
//
message rep_conf_per {
	// Purpose of periodic RRC measurements.
	optional periodic_rep_purpose purpose = 1;
}

//
// Message definition for threshold to be used in EUTRA measurement report
// triggering condition for event.
//
message threshold_EUTRA {
	// RSRP or RSRQ threshold values used in triggering event.
	oneof threshold {
		// Threshold RSRP value.
		int32 RSRP = 1;
		// Threshold RSRQ value.
		int32 RSRQ = 2;
	}
}

//
// Message definition for report configuration for A1 event based
// RRC measurements.
// Event: Serving becomes better than absolute threshold.
//
message rep_conf_a1 {
	// Threshold to be used in EUTRA measurement report triggering
	// condition for event.
	optional threshold_EUTRA a1_threshold = 1;
}

//
// Message definition for report configuration for A2 event based
// RRC measurements.
// Event: Serving becomes worse than absolute threshold.
//
message rep_conf_a2 {
	// Threshold to be used in EUTRA measurement report triggering
	// condition for event.
	optional threshold_EUTRA a2_threshold = 1;
}

//
// Message definition for report configuration for A3 event based
// RRC measurements.
// Event: Neighbour becomes amount of offset better than PCell.
//
message rep_conf_a3 {
	// Offset used in EUTRA measurement report triggering
	// condition for event.
	optional int32 a3_offset = 1;
	// Flag used to denote whether to report measurement on leave condition
	// of event.
	optional uint32 report_on_leave = 2;
}

//
// Message definition for report configuration for A4 event based
// RRC measurements.
// Event: Neighbour becomes better than absolute threshold.
//
message rep_conf_a4 {
	// Threshold to be used in EUTRA measurement report triggering
	// condition for event.
	optional threshold_EUTRA a4_threshold = 1;
}

//
// Message definition for report configuration for A5 event based
// RRC measurements.
// Event: PCell becomes worse than absolute threshold1 AND Neighbour becomes
// better than another absolute threshold2.
//
message rep_conf_a5 {
	// Threshold to be used in EUTRA measurement report triggering
	// condition for event.
	optional threshold_EUTRA a5_threshold1 = 1;
	// Threshold to be used in EUTRA measurement report triggering
	// condition for event.
	optional threshold_EUTRA a5_threshold2 = 2;
}

//
// Message definition for RRC measurement Report Configuration EUTRA object.
//
message rep_conf_EUTRA {
	oneof conf_EUTRA {
		// Periodical report configuration.
		rep_conf_per periodical = 1;
		// A1 event report configuration.
		rep_conf_a1 a1 = 2;
		// A2 event report configuration.
		rep_conf_a2 a2 = 3;
		// A3 event report configuration.
		rep_conf_a3 a3 = 4;
		// A4 event report configuration.
		rep_conf_a4 a4 = 5;
		// A5 event report configuration.
		rep_conf_a5 a5 = 6;
	}
	// Parameter used within the entry and leave condition of an event
	// triggered reporting condition. Range INTEGER (0..30).
	optional int32 hysteresis = 7;
	// Time during which specific criteria for the event needs to be
	// met in order to trigger a measurement report.
	optional time_to_trigger trigg_time = 8;
	// Quantity to be used as reference for triggering the event.
	optional trigger_quantity trigg_quant = 9;
	// Quantity to be reported while reporting the RRC measurements.
	optional report_quantity report_quant = 10;
	// Max number of cells that needs to be be considered for reporting.
	optional uint32 max_rep_cells = 11;
	// Interval between periodical reports.
	optional report_interval rep_interval = 12;
	// Number of RRC measurements reports to be reported for the configured
	// measurement.
	optional report_amount rep_amount = 13;
	// Setup or release the measurement of UE Rx Tx time difference.
	// Requires UE with Rel.9 and above. Applicable only in EUTRA measurements.
	optional ue_rxtx_time_difference ue_rxtx_time_diff = 14;
}

//
// Message definition for RRC measurement Report Configuration object.
//
message report_config {
	// Report Configuration identifier.
	// ID range from (1-32) and 0 means not set.
	required int32 reportConfId = 1 [default = 0];
	// Measurement report configuration.
	oneof rep_conf {
		// Report Configuration for EUTRA.
		rep_conf_EUTRA rc_EUTRA = 2;
		// Report Configuration for RAT other than EUTRA.
		//rep_conf_INTERRAT rc_INTERRAT = 3;
	}
}

//
// Message definition for RRC Measurement Identifier object.
//
message meas_identifier {
	// Measurement id.
	required int32 id = 1;
	// Measurement Object Id to associate with this measurement.
	required int32 measObj_id = 2;
	// Report Configuration Id to associate with this measurement.
	required int32 report_conf_id = 3;
}

//
// Message definition for RRC measurements configuration of a UE.
//
message ue_rrc_meas_conf_repl {
	// RNTI of UE.
	required uint32 rnti = 1;
	// Status of UE RRC measurement configuration request. Success or Failure.
	required conf_req_status status = 2;
	// RRC state of the UE.
	optional rrc_state ue_rrc_state = 3;
	// Measurement gap configuration in RRC reconfiguration message.
	optional meas_gap_pattern meas_gap_patt = 4;
	// Measurement gap offset if measurement gap is configured.
	optional uint32 meas_gap_config_sf_offset = 5;
	// UE capabilities information.
	optional ue_capabilities capabilities = 6;
	// Measurement object configurations.
	repeated meas_object m_obj = 7;
	// Measurement report configuration.
	repeated report_config r_conf = 8;
	// Measurement identifers.
	repeated meas_identifier meas_id = 9;
	// Operating frequency (MHz) of the UE's primary serving cell.
	optional float freq = 10;
	// UE's primary serving cell FDD or TDD.
	optional DD_mode pcell_DD = 11;
}

//
// RRC measurements configurations message: Triggered or single event type.
//
message ue_rrc_meas_conf {
	// Types of rrc measurements configuration messages.
	oneof ue_rrc_meas_conf_m {
		// Request message for UE's rrc measurements configuration.
		ue_rrc_meas_conf_req req = 1;
		// Reply message with UE's rrc measurements configuration.
		ue_rrc_meas_conf_repl repl = 2;
	}
}

//
// Message definition for request of identifiers of all the UEs registered.
//
message ues_id_req {
	// Dummy variable (Used in Python Protobuf)
	optional int32 dummy = 1;
}

//
// Message definition for identifiers of all the UEs.
//
message ues_id_repl {
	// Status of UEs ID request. Success or Failure.
	required conf_req_status status = 1;
	// Active UE RNTIs.
	repeated uint32 active_rnti = 2;
	// Inactive UE RNTIs.
	repeated uint32 inactive_rnti = 3;
}

//
// Message definition for getting UEs registered in eNB.
//
message ues_id {
	// Request and response for UEs identifier for all UEs.
	oneof ues_id_m {
		// Request message for identifiers of all the UEs registered.
		ues_id_req req = 1;
		// Reply message with identifiers of all the UEs registered.
		ues_id_repl repl = 2;
	}
}
